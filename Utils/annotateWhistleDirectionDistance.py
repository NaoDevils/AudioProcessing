import os
import sys
import glob
import pickle
import warnings
import sounddevice as sd
from tqdm import tqdm
from pathlib import Path
warnings.filterwarnings("ignore", category=DeprecationWarning) 
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
os.environ['OMP_NUM_THREADS'] = '1'

import tensorflow as tf
tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)

import numpy as np
import matplotlib.pyplot as plt
from scipy.io import wavfile
from matplotlib.backend_bases import MouseButton

def generateDistanceVec(angleVec, distance):
    s = "["
    for val in np.ones_like(angleVec)*distance:
        s += str(val) + ", "
    print(s + "]")
    
    exit()

if os.path.isfile("tmp_x_train.pkl"):
    os.remove("tmp_x_train.pkl")
if os.path.isfile("tmp_x_level_train.pkl"):
    os.remove("tmp_x_level_train.pkl")
if os.path.isfile("tmp_x_train_phi.pkl"):
    os.remove("tmp_x_train_phi.pkl")
if os.path.isfile("tmp_y_train.pkl"):
    os.remove("tmp_y_train.pkl")

MICS = ["rear left", "rear right", "front left", "front right"]
TEST_OR_TRAIN = "Demo"
MODEL_NAME = "./PreTrainedNetworks/WhistleDetection/WhistleNetMk16.h5"
WINDOW_SIZE = 1024
THRESHOLD = 0.25
ATTENTION_MULTIPLIER = 1.25
MIN_WHISTLE_LENGTH = 18 # median full whistle length for min whistle length zero (18)
JITTER = (0,0) # slide window to the front [0] slices and to the back [1] slices (0,2)
DIRECTION_LABELS = {"CyclopsMicTestLab":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "CyclopsMicTestLab2":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "CyclopsMicTestLab3":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "CyclopsMicTestLab4":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "CyclopsMicTestLab5":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "CyclopsMicTestLab6":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "CyclopsMicTestLab7":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "CyclopsMicTestLab8":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "CyclopsMicTestLab9":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "CyclopsMicTestLab10": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "ElektraMicTestLab3":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "ElektraMicTestLab22": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "ElektraMicTestLab23": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "ElektraMicTestLab24": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "ElektraMicTestLab25": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "ElektraMicTestLab26": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "ElektraMicTestLab27": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "FrogthorMicTestLab":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45, -90,-135,-180,135,90,45,0,-45],
                    "FrogthorMicTestLab2": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "FrogthorMicTestLab3": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "GrootMicTestLab3":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "GrootMicTestLab4":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "GrootMicTestLab5":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "GrootMicTestLab6":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "GrootMicTestLab7":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "GrootMicTestLab8":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "GrootMicTestLab9":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "GrootMicTestLab10":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "GrootMicTestLab11":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "GrootMicTestLab24":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "GrootMicTestLab25":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "IronmanMicTestLab3":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "IronmanMicTestLab4":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "IronmanMicTestLab5":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "JarvisMicTestLab":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "JarvisMicTestLab3":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45, -90,-135,-180,135,90,45,0,-45, -90,-135,-180,135,90,45,0,-45, -90,-135,-180,135,90,45,0,-45, -90,-135,-180,135,90,45,0,-45],
                    "KronosMicTestLab2":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab4":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab5":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab6":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab7":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab8":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab9":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab10":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab11":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab12":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab13":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab14":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab15":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab24":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab25":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab26":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab27":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab28":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,      -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45,   0,0,0,   -45,-45,-45,-45,-45],
                    "KronosMicTestLab29":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab30":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,     -180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "KronosMicTestLab31":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "LokiMicTestLab":      [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45, -90,-135,-180,135,90,45,0,-45, -90,-135,-180,135,90,45,0,-45, -90,-135,-180,135,90,45,0,-45, -90,-135,-180,135,90,45,0,-45],
                    "LokiMicTestLab3":     [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "LokiMicTestLab4":     [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "LokiMicTestLab5":     [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "MystiqueMicTestLab":  [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45, -90,-135,-180,135,90,45,0,-45, -90,-135,-180,135,90,45,0,-45, -90,-135,-180,135,90,45,0,-45, -90,-135,-180,135,90,45,0,-45],
                    "MystiqueMicTestLab2": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "MystiqueMicTestLab3": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "MystiqueMicTestLab4": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "MystiqueMicTestLab5": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "MystiqueMicTestLab12":[-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "MystiqueMicTestLab13":[-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "MystiqueMicTestLab14":[-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "MystiqueMicTestLab15":[-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "MystiqueMicTestLab22":[-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "MystiqueMicTestLab23":[-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "MystiqueMicTestLab26":[-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "MystiqueMicTestLab27":[-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "MystiqueMicTestLab28":[-90,-90,-90,-90,-90, -135,-135,-135,-135,      -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,   90,90, 45,45,45,45,45, 0,0,    0, -45,-45,-45,-45,-45],
                    "MystiqueMicTestLab29":[-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,    135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "MystiqueMicTestLab30":[-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,      135,135,             90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45    ],
                    "MystiqueMicTestLab31":[-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "NovaMicTestLab":      [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "NovaMicTestLab2":     [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "NovaMicTestLab3":     [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "NovaMicTestLab4":     [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "NovaMicTestLab5":     [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "NovaMicTestLab6":     [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "NovaMicTestLab7":     [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "NovaMicTestLab8":     [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "NovaMicTestLab12":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "NovaMicTestLab13":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "NovaMicTestLab14":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "NovaMicTestLab15":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "NovaMicTestLab16":    [-90,-90,-90,-90,-90, -112.5,-112.5,-112.5,-112.5,-112.5, -135,-135,-135,-135,-135, -157.5,-157.5,-157.5,-157.5,-157.5, -180,-180,-180,-180,-180, 157.5,157.5,157.5,157.5,157.5, 135,135,135,135,135, 112.5,112.5,112.5,112.5,112.5, 90,90,90,90,90, 67.5,67.5,67.5,67.5,67.5, 45,45,45,45,45, 22.5,22.5,22.5,22.5,22.5, 0,0,0,0,0, -22.5,-22.5,-22.5,-22.5,-22.5, -45,-45,-45,-45,-45, -67.5,-67.5,-67.5,-67.5,-67.5],
                    "NovaMicTestLab17":    [-90,-90,-90,-90,-90, -112.5,-112.5,-112.5,-112.5,-112.5, -135,-135,-135,-135,-135, -157.5,-157.5,-157.5,-157.5,-157.5, -180,-180,-180,-180,-180, 157.5,157.5,157.5,157.5,157.5, 135,135,135,135,135, 112.5,112.5,112.5,112.5,112.5, 90,90,90,90,90, 67.5,67.5,67.5,67.5,67.5, 45,45,45,45,45, 22.5,22.5,22.5,22.5,22.5, 22.5,22.5,22.5,22.5,22.5, 0,0,0,0,0, -22.5,-22.5,-22.5,-22.5,-22.5, -45,-45,-45,-45,-45, -67.5,-67.5,-67.5,-67.5,-67.5],
                    "NovaMicTestLab18":    [-90,-90,-90,-90,-90, -112.5,-112.5,-112.5,-112.5,-112.5, -135,-135,-135,-135,-135, -157.5,-157.5,-157.5,-157.5,-157.5, -180,-180,-180,-180,-180, 157.5,157.5,157.5,157.5,157.5, 135,135,135,135,135, 112.5,112.5,112.5,112.5,112.5, 90,90,90,90,90, 67.5,67.5,67.5,67.5,67.5, 45,45,45,45,45, 22.5,22.5,22.5,22.5,22.5, 0,0,0,0,0, -22.5,-22.5,-22.5,-22.5,-22.5, -45,-45,-45,-45,-45, -67.5,-67.5,-67.5,-67.5,-67.5],
                    "NovaMicTestLab19":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "NovaMicTestLab20":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "NovaMicTestLab21":    [-90,-90,-90,-90,-90, -112.5,-112.5,-112.5,-112.5,-112.5, -135,-135,-135,-135,-135, -157.5,-157.5,-157.5,-157.5,-157.5, -180,-180,-180,-180,-180, 157.5,157.5,157.5,157.5,157.5, 135,135,135,135,135, 112.5,112.5,112.5,112.5,112.5, 90,90,90,90,90, 67.5,67.5,67.5,67.5,67.5, 45,45,45,45,45, 22.5,22.5,22.5,22.5,22.5, 0,0,0,0,0, -22.5,-22.5,-22.5,-22.5,-22.5, -45,-45,-45,-45,-45, -67.5,-67.5,-67.5,-67.5,-67.5],
                    "NovaMicTestLab22":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "NovaMicTestLab23":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "ThanosMicTestLab3":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "VenomMicTestLab":     [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90, 45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45, -90,-135,-180,135,90,45,0,-45, -90,-135,-180,135,90,45,0,-45, -90,-135,-180,135,90,45,0,-45, -90,-135,-180,135,90,45,0,-45],
                    "VenomMicTestLab4":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "VenomMicTestLab5":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "VenomMicTestLab6":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "VenomMicTestLab7":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "VenomMicTestLab8":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "VenomMicTestLab9":    [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "VenomMicTestLab10":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "VenomMicTestLab11":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "VenomMicTestLab22":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "VenomMicTestLab23":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "VenomMicTestLab24":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "VenomMicTestLab25":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "VenomMicTestLab26":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "VenomMicTestLab27":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "ProteusMicTestLab":   [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "Flur_oben_3m":        [-90,-90,-90,-90,-90, -180,-180,-180,-180,-180, 90,90,90,90,90, 0,0,0,0,0],
                    "Flur_oben_15_3m":     [-90,-90,-90,-90,-90, -180,-180,-180,-180,-180, 90,90,90,90,90, 0,0,0,0,0],
                    "Flur_unten_12_4m":    [-90,-90,-90,-90,-90, -180,-180,-180,-180,-180, 90,90,90,90,90, 0,0,0,0,0],
                    "Keller_7m":           [-90,-90,-90,-90,-90, -180,-180,-180,-180,-180, 90,90,90,90,90, 0,0,0,0,0],
                    "Konferenzraum_1_6m":  [-90,-90,-90,-90,-90, -180,-180,-180,-180,-180, 90,90,90,90,90, 0,0,0,0,0],
                    "Konferenzraum_3_5m":  [-90,-90,-90,-90,-90, -180,-180,-180,-180,-180, 90,90,90,90,90, 0,0,0,0,0],
                    "Treppenhaus_1m":      [-90,-90,-90,-90,-90, -180,-180,-180,-180,-180, 90,90,90,90,90, 0,0,0,0,0],
                    "Treppenhaus_2_5m":    [-90,-90,-90,-90,-90, -180,-180,-180,-180,-180, 90,90,90,90,90, 0,0,0,0,0],
                    "Audimax_Hamburg_5_4m":[-90,-90,-90,-90,-90, -180,-180,-180,-180, 90,90,90,90,90, 0,0,0,0,0],
                    "Audimax_Hamburg_8_51m":[-90,-90,-90,-90,-90, -180,-180,-180,-180,-180, 90,90,90,90,90, 0,0,0,0,0],
                    "Groot_MMI_5m": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "Groot_MMI_Curtain_5m": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "Kronos_MMI_4_5m": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "Kronos_MMI_6m": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135,135, 90,90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "Kronos_MMI_Curtain_4_5m": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "Kronos_MMI_Curtain_6m": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "Venom_MMI_1m": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "Venom_MMI_2m": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "Venom_MMI_Curtain_1m": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "Venom_MMI_Curtain_2m": [-90,-90,-90,-90,-90, -135,-135,-135,-135,-135, -180,-180,-180,-180,-180, 135,135,135,135,135, 90,90,90,90,90, 45,45,45,45,45, 0,0,0,0,0, -45,-45,-45,-45,-45],
                    "RomeTest":            [90, -180, -90, 0],
                    "Kronos_Lab_Test_01": [326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326,326, 270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270, 203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203, 215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215, 346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346,346, 15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15, 90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90, 166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166, 146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146, 90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90],
                    "Venom_Lab_Test_01":  [293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293,293, 223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223, 194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194, 198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198, 319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319, 57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57, 166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166, 171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171, 158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158, 136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136],
                    "Blade_Lab_Test_01":  [338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338,338, 316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316, 236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236, 279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279, 351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351,351, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,                                                   13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,                                                   139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139, 113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113, 43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43],
                    "Hulk_Lab_Test_02":   [-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90, -135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135, -180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180, 135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135, 90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90, 45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, -45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45],
                    "Electra_Lab_Test_02":[-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90,-90, -135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135,-135, -180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180,-180, 135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135, 90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90, 45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, -45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45,-45],
                    "Demo":[0]}

# generateDistanceVec(DIRECTION_LABELS["GrootMicTestLab3"], 3.1)

DISTANCE_LABELS = {"CyclopsMicTestLab":    [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1],
                    "CyclopsMicTestLab2":  [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1],
                    "CyclopsMicTestLab3":  [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "CyclopsMicTestLab4":  [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "CyclopsMicTestLab5":  [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "CyclopsMicTestLab6":  [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "CyclopsMicTestLab7":  [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "CyclopsMicTestLab8":  [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "CyclopsMicTestLab9":  [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "CyclopsMicTestLab10": [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "ElektraMicTestLab3":  [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1],
                    "ElektraMicTestLab22": [7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7],
                    "ElektraMicTestLab23": [7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7],
                    "ElektraMicTestLab24": [7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7],
                    "ElektraMicTestLab25": [4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5],
                    "ElektraMicTestLab26": [6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0],
                    "ElektraMicTestLab27": [9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0],
                    "FrogthorMicTestLab":  [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1],
                    "FrogthorMicTestLab2": [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1],
                    "FrogthorMicTestLab3": [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1],
                    "GrootMicTestLab3":    [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1],
                    "GrootMicTestLab4":    [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "GrootMicTestLab5":    [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "GrootMicTestLab6":    [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "GrootMicTestLab7":    [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "GrootMicTestLab8":    [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "GrootMicTestLab9":    [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "GrootMicTestLab10":   [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "GrootMicTestLab11":   [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "GrootMicTestLab24":   [6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0],
                    "GrootMicTestLab25":   [9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0],
                    "IronmanMicTestLab3":  [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1],
                    "IronmanMicTestLab4":  [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "IronmanMicTestLab5":  [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "JarvisMicTestLab":    [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1],
                    "JarvisMicTestLab3":   [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1],
                    "KronosMicTestLab":    [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1],
                    "KronosMicTestLab2":   [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1],
                    "KronosMicTestLab4":   [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "KronosMicTestLab5":   [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "KronosMicTestLab6":   [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "KronosMicTestLab7":   [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "KronosMicTestLab8":   [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "KronosMicTestLab9":   [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "KronosMicTestLab10":  [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "KronosMicTestLab11":  [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "KronosMicTestLab12":  [9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0],
                    "KronosMicTestLab13":  [9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0],
                    "KronosMicTestLab14":  [9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0],
                    "KronosMicTestLab15":  [9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0],
                    "KronosMicTestLab24":  [9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0],
                    "KronosMicTestLab25":  [6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0],
                    "KronosMicTestLab26":  [7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7],
                    "KronosMicTestLab27":  [4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5],
                    "KronosMicTestLab28":  [10.,10.,10.,10.,10., 10.,10.,10.,10.,     10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10.,     10.,10.,10.,     10.,10.,10.,10.,10.],
                    "KronosMicTestLab29":  [10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10.],
                    "KronosMicTestLab30":  [10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.    ,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10.],
                    "KronosMicTestLab31":  [10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10.],
                    "LokiMicTestLab":      [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1],
                    "LokiMicTestLab3":     [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1],
                    "LokiMicTestLab4":     [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "LokiMicTestLab5":     [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "MystiqueMicTestLab":  [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1],
                    "MystiqueMicTestLab2": [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1],
                    "MystiqueMicTestLab3": [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1],
                    "MystiqueMicTestLab4": [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "MystiqueMicTestLab5": [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "MystiqueMicTestLab12":[7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7],
                    "MystiqueMicTestLab13":[7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7],
                    "MystiqueMicTestLab14":[7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7],
                    "MystiqueMicTestLab15":[7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7],
                    "MystiqueMicTestLab22":[4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5],
                    "MystiqueMicTestLab23":[4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5],
                    "MystiqueMicTestLab26":[4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5],
                    "MystiqueMicTestLab27":[7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7],
                    "MystiqueMicTestLab28":[6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,     6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,    6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,         6.0,6.0,6.0,6.0,6.0],
                    "MystiqueMicTestLab29":[6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,    6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0],
                    "MystiqueMicTestLab30":[6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,     6.0,6.0,             6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0    ],
                    "MystiqueMicTestLab31":[6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0],
                    "NovaMicTestLab":      [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "NovaMicTestLab2":     [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "NovaMicTestLab3":     [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "NovaMicTestLab4":     [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "NovaMicTestLab5":     [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "NovaMicTestLab6":     [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "NovaMicTestLab7":     [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "NovaMicTestLab8":     [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "NovaMicTestLab12":    [4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5],
                    "NovaMicTestLab13":    [4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5],
                    "NovaMicTestLab14":    [4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5],
                    "NovaMicTestLab15":    [4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5],
                    "NovaMicTestLab16":    [4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5],
                    "NovaMicTestLab17":    [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "NovaMicTestLab18":    [6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0],
                    "NovaMicTestLab19":    [7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7],
                    "NovaMicTestLab20":    [9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0],
                    "NovaMicTestLab21":    [10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10., 10.,10.,10.,10.,10.],
                    "NovaMicTestLab22":    [6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0],
                    "NovaMicTestLab23":    [6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0],
                    "ThanosMicTestLab3":   [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1],
                    "VenomMicTestLab":     [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1,3.1,3.1,3.1],
                    "VenomMicTestLab4":    [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "VenomMicTestLab5":    [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "VenomMicTestLab6":    [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "VenomMicTestLab7":    [0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7, 0.7,0.7,0.7,0.7,0.7],
                    "VenomMicTestLab8":    [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "VenomMicTestLab9":    [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "VenomMicTestLab10":   [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "VenomMicTestLab11":   [1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9, 1.9,1.9,1.9,1.9,1.9],
                    "VenomMicTestLab22":   [9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0],
                    "VenomMicTestLab23":   [9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0],
                    "VenomMicTestLab24":   [4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5],
                    "VenomMicTestLab25":   [7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7, 7.7,7.7,7.7,7.7,7.7],
                    "VenomMicTestLab26":   [9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0, 9.0,9.0,9.0,9.0,9.0],
                    "VenomMicTestLab27":   [6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0],
                    "ProteusMicTestLab":   [3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1, 3.1,3.1,3.1,3.1,3.1],
                    "Flur_oben_3m":        [3.0,3.0,3.0,3.0,3.0, 3.0,3.0,3.0,3.0,3.0, 3.0,3.0,3.0,3.0,3.0, 3.0,3.0,3.0,3.0,3.0],
                    "Flur_oben_15_3m":     [15.3,15.3,15.3,15.3,15.3, 15.3,15.3,15.3,15.3,15.3, 15.3,15.3,15.3,15.3,15.3, 15.3,15.3,15.3,15.3,15.3],
                    "Flur_unten_12_4m":    [12.4,12.4,12.4,12.4,12.4, 12.4,12.4,12.4,12.4,12.4, 12.4,12.4,12.4,12.4,12.4, 12.4,12.4,12.4,12.4,12.4],
                    "Keller_7m":           [7.0,7.0,7.0,7.0,7.0, 7.0,7.0,7.0,7.0,7.0, 7.0,7.0,7.0,7.0,7.0, 7.0,7.0,7.0,7.0,7.0],
                    "Konferenzraum_1_6m":  [1.6,1.6,1.6,1.6,1.6, 1.6,1.6,1.6,1.6,1.6, 1.6,1.6,1.6,1.6,1.6, 1.6,1.6,1.6,1.6,1.6],
                    "Konferenzraum_3_5m":  [3.5,3.5,3.5,3.5,3.5, 3.5,3.5,3.5,3.5,3.5, 3.5,3.5,3.5,3.5,3.5, 3.5,3.5,3.5,3.5,3.5],
                    "Treppenhaus_1m":      [1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0],
                    "Treppenhaus_2_5m":    [2.5,2.5,2.5,2.5,2.5, 2.5,2.5,2.5,2.5,2.5, 2.5,2.5,2.5,2.5,2.5, 2.5,2.5,2.5,2.5,2.5],
                    "Audimax_Hamburg_5_4m":[5.4,5.4,5.4,5.4,5.4, 5.4,5.4,5.4,5.4, 5.4,5.4,5.4,5.4,5.4, 5.4,5.4,5.4,5.4,5.4],
                    "Audimax_Hamburg_8_51m":[8.51,8.51,8.51,8.51,8.51, 8.51,8.51,8.51,8.51,8.51, 8.51,8.51,8.51,8.51,8.51, 8.51,8.51,8.51,8.51,8.51],
                    "Groot_MMI_5m": [5.0,5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0,5.0],
                    "Groot_MMI_Curtain_5m": [5.0,5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0,5.0, 5.0,5.0,5.0,5.0,5.0],
                    "Kronos_MMI_4_5m": [4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5],
                    "Kronos_MMI_6m": [6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0],
                    "Kronos_MMI_Curtain_4_5m": [4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5, 4.5,4.5,4.5,4.5,4.5],
                    "Kronos_MMI_Curtain_6m": [6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0, 6.0,6.0,6.0,6.0,6.0],
                    "Venom_MMI_1m": [1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0],
                    "Venom_MMI_2m": [2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0,2.0],
                    "Venom_MMI_Curtain_1m": [1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0, 1.0,1.0,1.0,1.0,1.0],
                    "Venom_MMI_Curtain_2m": [2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0,2.0, 2.0,2.0,2.0,2.0,2.0],
                    "RomeTest":            [0.7, 0.7, 0.7, 0.7],
                    "Kronos_Lab_Test_01": [5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4, 3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0, 4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9,4.9, 3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5, 4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6, 4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1, 0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8, 4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6,4.6, 5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4,5.4, 3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0],
                    "Venom_Lab_Test_01":  [3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3, 4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4, 8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0, 6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4,6.4, 1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7, 1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3, 3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3, 7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8, 8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3, 4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4],
                    "Blade_Lab_Test_01":  [8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3,8.3, 4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4, 2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4, 2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0, 7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8,7.8, 7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2,7.2, 3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3,3.3, 1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7,1.7, 3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2, 4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4,4.4],
                    "Hulk_Lab_Test_02":   [4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1, 4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1, 4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1, 4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1, 4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1, 4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1, 4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1, 4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1,4.1],
                    "Electra_Lab_Test_02":[1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3, 1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3, 1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3, 1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3, 1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3, 1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3, 1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3, 1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3,1.3],
                    "Demo": [1.0]}

ROOM_LABELS =  {"CyclopsMicTestLab":   "Arena",
                "CyclopsMicTestLab2":  "Arena",
                "CyclopsMicTestLab3":  "Arena",
                "CyclopsMicTestLab4":  "Arena",
                "CyclopsMicTestLab5":  "Arena",
                "CyclopsMicTestLab6":  "Arena",
                "CyclopsMicTestLab7":  "Arena",
                "CyclopsMicTestLab8":  "Arena",
                "CyclopsMicTestLab9":  "Arena",
                "CyclopsMicTestLab10": "Arena",
                "ElektraMicTestLab3":  "Arena",
                "ElektraMicTestLab22": "Arena",
                "ElektraMicTestLab23": "Arena",
                "ElektraMicTestLab24": "Arena",
                "ElektraMicTestLab25": "Arena",
                "ElektraMicTestLab26": "Arena",
                "ElektraMicTestLab27": "Arena",
                "FrogthorMicTestLab":  "Arena",
                "FrogthorMicTestLab2": "Arena",
                "FrogthorMicTestLab3": "Arena",
                "GrootMicTestLab3":    "Arena",
                "GrootMicTestLab4":    "Arena",
                "GrootMicTestLab5":    "Arena",
                "GrootMicTestLab6":    "Arena",
                "GrootMicTestLab7":    "Arena",
                "GrootMicTestLab8":    "Arena",
                "GrootMicTestLab9":    "Arena",
                "GrootMicTestLab10":   "Arena",
                "GrootMicTestLab11":   "Arena",
                "GrootMicTestLab24":   "Arena",
                "GrootMicTestLab25":   "Arena",
                "IronmanMicTestLab3":  "Arena",
                "IronmanMicTestLab4":  "Arena",
                "IronmanMicTestLab5":  "Arena",
                "JarvisMicTestLab":    "Arena",
                "JarvisMicTestLab3":   "Arena",
                "KronosMicTestLab":    "Arena",
                "KronosMicTestLab2":   "Arena",
                "KronosMicTestLab4":   "Arena",
                "KronosMicTestLab5":   "Arena",
                "KronosMicTestLab6":   "Arena",
                "KronosMicTestLab7":   "Arena",
                "KronosMicTestLab8":   "Arena",
                "KronosMicTestLab9":   "Arena",
                "KronosMicTestLab10":  "Arena",
                "KronosMicTestLab11":  "Arena",
                "KronosMicTestLab12":  "Arena",
                "KronosMicTestLab13":  "Arena",
                "KronosMicTestLab14":  "Arena",
                "KronosMicTestLab15":  "Arena",
                "KronosMicTestLab24":  "Arena",
                "KronosMicTestLab25":  "Arena",
                "KronosMicTestLab26":  "Arena",
                "KronosMicTestLab27":  "Arena",
                "KronosMicTestLab28":  "Arena",
                "KronosMicTestLab29":  "Arena",
                "KronosMicTestLab30":  "Arena",
                "KronosMicTestLab31":  "Arena",
                "LokiMicTestLab":      "Arena",
                "LokiMicTestLab3":     "Arena",
                "LokiMicTestLab4":     "Arena",
                "LokiMicTestLab5":     "Arena",
                "MystiqueMicTestLab":  "Arena",
                "MystiqueMicTestLab2": "Arena",
                "MystiqueMicTestLab3": "Arena",
                "MystiqueMicTestLab4": "Arena",
                "MystiqueMicTestLab5": "Arena",
                "MystiqueMicTestLab12":"Arena",
                "MystiqueMicTestLab13":"Arena",
                "MystiqueMicTestLab14":"Arena",
                "MystiqueMicTestLab15":"Arena",
                "MystiqueMicTestLab22":"Arena",
                "MystiqueMicTestLab23":"Arena",
                "MystiqueMicTestLab26":"Arena",
                "MystiqueMicTestLab27":"Arena",
                "MystiqueMicTestLab28":"Arena",
                "MystiqueMicTestLab29":"Arena",
                "MystiqueMicTestLab30":"Arena",
                "MystiqueMicTestLab31":"Arena",
                "NovaMicTestLab":      "Arena",
                "NovaMicTestLab2":     "Arena",
                "NovaMicTestLab3":     "Arena",
                "NovaMicTestLab4":     "Arena",
                "NovaMicTestLab5":     "Arena",
                "NovaMicTestLab6":     "Arena",
                "NovaMicTestLab7":     "Arena",
                "NovaMicTestLab8":     "Arena",
                "NovaMicTestLab12":    "Arena",
                "NovaMicTestLab13":    "Arena",
                "NovaMicTestLab14":    "Arena",
                "NovaMicTestLab15":    "Arena",
                "NovaMicTestLab16":    "Arena",
                "NovaMicTestLab17":    "Arena",
                "NovaMicTestLab18":    "Arena",
                "NovaMicTestLab19":    "Arena",
                "NovaMicTestLab20":    "Arena",
                "NovaMicTestLab21":    "Arena",
                "NovaMicTestLab22":    "Arena",
                "NovaMicTestLab23":    "Arena",
                "ThanosMicTestLab3":   "Arena",
                "VenomMicTestLab":     "Arena",
                "VenomMicTestLab4":    "Arena",
                "VenomMicTestLab5":    "Arena",
                "VenomMicTestLab6":    "Arena",
                "VenomMicTestLab7":    "Arena",
                "VenomMicTestLab8":    "Arena",
                "VenomMicTestLab9":    "Arena",
                "VenomMicTestLab10":   "Arena",
                "VenomMicTestLab11":   "Arena",
                "VenomMicTestLab22":   "Arena",
                "VenomMicTestLab23":   "Arena",
                "VenomMicTestLab24":   "Arena",
                "VenomMicTestLab25":   "Arena",
                "VenomMicTestLab26":   "Arena",
                "VenomMicTestLab27":   "Arena",
                "ProteusMicTestLab":   "Arena",
                "Flur_oben_3m":        "Hallway_upstairs",
                "Flur_oben_15_3m":     "Hallway_upstairs",
                "Flur_unten_12_4m":    "Hallway_downstairs",
                "Keller_7m":           "Basement",
                "Konferenzraum_1_6m":  "Meeting_Room",
                "Konferenzraum_3_5m":  "Meeting_Room",
                "Treppenhaus_1m":      "Staircase",
                "Treppenhaus_2_5m":    "Staircase",
                "Audimax_Hamburg_5_4m":"Audimax_Hamburg",
                "Audimax_Hamburg_8_51m":"Audimax_Hamburg",
                "Groot_MMI_5m": "MMI",
                "Groot_MMI_Curtain_5m": "MMI_Curtain",
                "Kronos_MMI_4_5m": "MMI",
                "Kronos_MMI_6m": "MMI",
                "Kronos_MMI_Curtain_4_5m": "MMI_Curtain",
                "Kronos_MMI_Curtain_6m": "MMI_Curtain",
                "Venom_MMI_1m": "MMI",
                "Venom_MMI_2m": "MMI",
                "Venom_MMI_Curtain_1m": "MMI_Curtain",
                "Venom_MMI_Curtain_2m": "MMI_Curtain",
                "RomeTest":            "Outdoor_Field_Rome_Maker_Faire",
                "Kronos_Lab_Test_01": "Arena",
                "Venom_Lab_Test_01": "Arena",
                "Blade_Lab_Test_01": "Arena",
                "Hulk_Lab_Test_02": "Conference_Room",
                "Electra_Lab_Test_02": "Office",
                "Demo": "Demonstration"}

def check_for_broken_mics(test_or_train = TEST_OR_TRAIN, model_name = MODEL_NAME, window_size = WINDOW_SIZE, threshold = THRESHOLD, direction_labels=DIRECTION_LABELS, distance_labels=DISTANCE_LABELS, room_labels=ROOM_LABELS, attention_multiplier = ATTENTION_MULTIPLIER):
    whistle_length = []
    whistle_gap_length = []
    angle_statistic = {}
    distance_statistic = {}
    used_files = 0
    with open(f"tmp_x.pkl", 'ab') as f_x, open(f"tmp_level.pkl", 'ab') as f_level, open(f"tmp_phi.pkl", 'ab') as f_phi,  open(f"tmp_y.pkl", 'ab') as f_y,  open(f"tmp_room.pkl", 'ab') as f_room:
        for path in tqdm(glob.glob(f"./WhistleDirectionDistance/{test_or_train}/*.wav"), desc="Generate Datasets"):
            room_label = room_labels.get(Path(path).stem)
            direction_label = direction_labels.get(Path(path).stem)
            distance_label = distance_labels.get(Path(path).stem)

            if direction_label is None:
                print(f"\nWARNING: No direction labelset of file {Path(path).stem}.wav exists!", file=sys.stderr)
                continue
            if distance_label is None:
                print(f"\nWARNING: No distance labelset of file {Path(path).stem}.wav exists!", file=sys.stderr)
                continue

            model = tf.keras.models.load_model(model_name, compile=False)  # load model
            _, data = wavfile.read(filename=path, mmap=True)
            channels = data.shape[1]
            hamming = np.hamming(window_size)

            data_frames = np.lib.stride_tricks.sliding_window_view(data, window_size, axis=0)[0::window_size//2, :]
            windowed_data = data_frames * hamming
            fft_windowed_data_log10 = np.reshape(20 * np.log10(np.abs(np.fft.fft(windowed_data)[:, :, 0:window_size//2 + 1])),
                                        (windowed_data.shape[0], channels, window_size//2 + 1, 1))

            fft_windowed_data = np.reshape(np.fft.fft(windowed_data)[:, :, 0:window_size//2 + 1],
                                        (windowed_data.shape[0], channels, window_size//2 + 1, 1))


            # Shape => Channels, Number of Windows, FFT Data, 1
            data_frames = np.reshape(np.asarray(np.split(data_frames, channels, axis=1)),(channels, data_frames.shape[0], window_size, 1))
            fft_windowed_data_log10 = np.reshape(np.asarray(np.split(fft_windowed_data_log10, channels, axis=1)),
                                        (channels, windowed_data.shape[0], window_size//2 + 1, 1))

            fft_windowed_data = np.reshape(np.asarray(np.split(fft_windowed_data, channels, axis=1)),
                                        (channels, windowed_data.shape[0], window_size//2 + 1, 1))
            del windowed_data

            label = []
            for fft_data_windows in fft_windowed_data_log10:
                channel_label = []
                for fft_data in np.array_split(fft_data_windows, np.ceil(fft_data_windows.shape[0]/2048)):
                    channel_label.extend(model.predict(fft_data))
                label.append(channel_label)
            label = np.asarray(label)
            del fft_windowed_data_log10

            label[label > threshold] = window_size//4
            label[label <= threshold] = 0.0

            longest_sequence = 0
            for channel in range(channels):
                last_label = label[channel][0]
                sequence = 0
                for whistle_label in label[channel]:
                    if last_label > 0 and whistle_label == last_label:
                        sequence += 1
                    else:
                        if sequence > longest_sequence:
                            longest_sequence = sequence
                        sequence = 0
                    last_label = whistle_label
            attention_length = longest_sequence * attention_multiplier

            whistle_idx_range = []
            detected_whistles = []
            for channel in range(channels):
                perv_whistle_label = 0.0
                min_idx = 0
                max_idx = 0
                tmp_whistle_idx_range = []
                attention = 0
                active_attention = False
                for idx, whistle_label in enumerate(label[channel]):
                    if perv_whistle_label == 0.0 and whistle_label == window_size//4:
                        min_idx = idx
                        active_attention = True
                    elif perv_whistle_label == window_size//4 and whistle_label == 0.0:
                        max_idx = idx - 1

                    if active_attention and attention > attention_length:
                        tmp_whistle_idx_range.append([min_idx, max_idx])
                        active_attention = False
                        attention = 0

                    if active_attention:
                        attention += 1

                    perv_whistle_label = whistle_label
                if not tmp_whistle_idx_range:
                    print(f"\nWARNING: No whistle detected in file {Path(path).stem}.wav: mic at {MICS[channel]} possibly broken or no whistle was recorded!", file=sys.stderr)

def generate_dataset(test_or_train = TEST_OR_TRAIN, model_name = MODEL_NAME, window_size = WINDOW_SIZE, threshold = THRESHOLD, direction_labels=DIRECTION_LABELS, distance_labels=DISTANCE_LABELS, room_labels=ROOM_LABELS, attention_multiplier = ATTENTION_MULTIPLIER):
    whistle_length = []
    whistle_gap_length = []
    angle_statistic = {}
    distance_statistic = {}
    used_files = 0
    with open(f"tmp_x.pkl", 'ab') as f_x, open(f"tmp_level.pkl", 'ab') as f_level, open(f"tmp_phi.pkl", 'ab') as f_phi,  open(f"tmp_y.pkl", 'ab') as f_y,  open(f"tmp_room.pkl", 'ab') as f_room:
        for path in tqdm(glob.glob(f"./WhistleDirectionDistance/{test_or_train}/*.wav"), desc="Generate Datasets"):
            room_label = room_labels.get(Path(path).stem)
            direction_label = direction_labels.get(Path(path).stem)
            distance_label = distance_labels.get(Path(path).stem)

            if direction_label is None:
                print(f"\nWARNING: No direction labelset of file {Path(path).stem}.wav exists!", file=sys.stderr)
                continue
            if distance_label is None:
                print(f"\nWARNING: No distance labelset of file {Path(path).stem}.wav exists!", file=sys.stderr)
                continue

            model = tf.keras.models.load_model(model_name, compile=False)  # load model
            _, data = wavfile.read(filename=path, mmap=True)
            channels = data.shape[1]
            hamming = np.hamming(window_size)

            data_frames = np.lib.stride_tricks.sliding_window_view(data, window_size, axis=0)[0::window_size//2, :]
            windowed_data = data_frames * hamming
            fft_windowed_data_log10 = np.reshape(20 * np.log10(np.abs(np.fft.fft(windowed_data)[:, :, 0:window_size//2 + 1])),
                                        (windowed_data.shape[0], channels, window_size//2 + 1, 1))

            fft_windowed_data = np.reshape(np.fft.fft(windowed_data)[:, :, 0:window_size//2 + 1],
                                        (windowed_data.shape[0], channels, window_size//2 + 1, 1))


            # Shape => Channels, Number of Windows, FFT Data, 1
            data_frames = np.reshape(np.asarray(np.split(data_frames, channels, axis=1)),(channels, data_frames.shape[0], window_size, 1))
            fft_windowed_data_log10 = np.reshape(np.asarray(np.split(fft_windowed_data_log10, channels, axis=1)),
                                        (channels, windowed_data.shape[0], window_size//2 + 1, 1))

            fft_windowed_data = np.reshape(np.asarray(np.split(fft_windowed_data, channels, axis=1)),
                                        (channels, windowed_data.shape[0], window_size//2 + 1, 1))
            del windowed_data

            label = []
            for fft_data_windows in fft_windowed_data_log10:
                channel_label = []
                for fft_data in np.array_split(fft_data_windows, np.ceil(fft_data_windows.shape[0]/2048)):
                    channel_label.extend(model.predict(fft_data))
                label.append(channel_label)
            label = np.asarray(label)
            del fft_windowed_data_log10

            label[label > threshold] = window_size//4
            label[label <= threshold] = 0.0

            longest_sequence = 0
            for channel in range(channels):
                last_label = label[channel][0]
                sequence = 0
                for whistle_label in label[channel]:
                    if last_label > 0 and whistle_label == last_label:
                        sequence += 1
                    else:
                        if sequence > longest_sequence:
                            longest_sequence = sequence
                        sequence = 0
                    last_label = whistle_label
            attention_length = longest_sequence * attention_multiplier

            whistle_idx_range = []
            detected_whistles = []
            for channel in range(channels):
                perv_whistle_label = 0.0
                min_idx = 0
                max_idx = 0
                tmp_whistle_idx_range = []
                attention = 0
                active_attention = False
                for idx, whistle_label in enumerate(label[channel]):
                    if perv_whistle_label == 0.0 and whistle_label == window_size//4:
                        min_idx = idx
                        active_attention = True
                    elif perv_whistle_label == window_size//4 and whistle_label == 0.0:
                        max_idx = idx - 1

                    if active_attention and attention > attention_length:
                        tmp_whistle_idx_range.append([min_idx, max_idx])
                        active_attention = False
                        attention = 0

                    if active_attention:
                        attention += 1

                    perv_whistle_label = whistle_label
                if not tmp_whistle_idx_range:
                    print(f"\nWARNING: No whistle detected in file {Path(path).stem}.wav: mic at {MICS[channel]} possibly broken or no whistle was recorded!", file=sys.stderr)
                else:
                    detected_whistles.append(len(tmp_whistle_idx_range))
                    whistle_idx_range.append(tmp_whistle_idx_range)
            
            if len(whistle_idx_range) < 3:
                print(f"\nERROR: Too many broken mics or no whistle was recorded in file {Path(path).stem}.wav!", file=sys.stderr)
                continue

            if len(np.unique(detected_whistles)) != 1:
                print(f"\nERROR: Possible false positive whistle detection for {Path(path).stem}.wav!", file=sys.stderr)
                continue

            whistle_idx_range = np.asarray(whistle_idx_range)
            whistle_idx_range = np.hstack((np.expand_dims(np.min(np.min(whistle_idx_range, axis=0), axis=1), axis=-1), np.expand_dims(np.max(np.max(whistle_idx_range, axis=0), axis=1), axis=-1)))
            if whistle_idx_range.shape[0] != len(direction_label):
                print(f"\nERROR: Detected whistles unequal labeled whistles for {Path(path).stem}.wav!", file=sys.stderr)
                continue

            last_upper_bound = None
            local_whistle_length = []
            local_whistle_gap_length = []
            for lower_bound, upper_bound in whistle_idx_range:
                if last_upper_bound is None:
                    last_upper_bound = upper_bound
                else:
                    local_whistle_gap_length.append(lower_bound - last_upper_bound)
                    last_upper_bound = upper_bound
                local_whistle_length.append((upper_bound + 1) - lower_bound)
            local_whistle_gap_length.append(label.shape[1] - last_upper_bound)

            used_files += 1
            direction_idx = 0
            for local_idx, idx_range in enumerate(whistle_idx_range):
                range_length = local_whistle_length[local_idx]
                gap_length = local_whistle_gap_length[local_idx]

                range_extension = 0
                if range_length < MIN_WHISTLE_LENGTH and range_length + gap_length//2 >= MIN_WHISTLE_LENGTH:
                    range_extension = np.abs(range_length - MIN_WHISTLE_LENGTH)

                local_whistle_length[local_idx] = range_length + range_extension
                local_whistle_gap_length[local_idx] = gap_length - range_extension
                
                for jdx in range(-JITTER[0], JITTER[1] + 1):
                    for idx in range(idx_range[0] + jdx, idx_range[1] + jdx + range_extension + 1):
                        x = []
                        x_level = []
                        x_phi = []
                        for channel in range(channels):
                            x.append(fft_windowed_data[channel][idx])
                            x_level.append(data_frames[channel][idx])
                            x_phi.append(np.arctan2(fft_windowed_data[channel][idx].imag, fft_windowed_data[channel][idx].real))
                        if direction_label[direction_idx] is not None:
                            pickle.dump(x, f_x)
                            pickle.dump(x_level, f_level)
                            pickle.dump(x_phi, f_phi)
                            pickle.dump([direction_label[direction_idx], distance_label[direction_idx]], f_y)
                            pickle.dump(room_label, f_room)
                    if direction_label[direction_idx] is not None and distance_label[direction_idx] is not None:
                        if angle_statistic.get(direction_label[direction_idx]) == None:
                            angle_statistic[direction_label[direction_idx]] = 3
                        else:
                            angle_statistic[direction_label[direction_idx]] += 3

                        if distance_statistic.get(distance_label[direction_idx]) == None:
                            distance_statistic[distance_label[direction_idx]] = 3
                        else:
                            distance_statistic[distance_label[direction_idx]] += 3
                direction_idx += 1

            whistle_length.extend(local_whistle_length)
            whistle_gap_length.extend(local_whistle_gap_length)
    

    whistle_length = np.repeat(whistle_length, len(range(-JITTER[0], JITTER[1] +1)))
    whistle_gap_length = np.repeat(whistle_gap_length, len(range(-JITTER[0], JITTER[1] +1)))

    with tqdm(desc="Saving Datasets", total=7) as pbar:
        test_or_train = str(test_or_train).lower()

        if os.path.isfile(f"direction_x_{test_or_train}.npy"):
            os.remove(f"direction_x_{test_or_train}.npy")
        if os.path.isfile(f"direction_x_level_{test_or_train}.npy"):
            os.remove(f"direction_x_level_{test_or_train}.npy")
        if os.path.isfile(f"direction_x_{test_or_train}_phi.npy"):
            os.remove(f"direction_x_{test_or_train}_phi.npy")
        if os.path.isfile(f"direction_y_{test_or_train}.npy"):
            os.remove(f"direction_y_{test_or_train}.npy")
        if os.path.isfile(f"whistle_length_{test_or_train}.npy"):
            os.remove(f"whistle_length_{test_or_train}.npy")

        with open(f"direction_x_{test_or_train}.npy", 'wb') as f:
            tmp_x = np.memmap("./tmp_x.arr", mode="w+", dtype=np.complex128, shape=(np.sum(whistle_length), 513, 4))
            with open(f"tmp_x.pkl", 'rb') as tmp_f:
                for idx in range(np.sum(whistle_length)):
                    tmp_arr = pickle.load(tmp_f)
                    tmp_arr = np.swapaxes(np.squeeze(tmp_arr, axis=-1), axis1=1, axis2=0)
                    tmp_x[idx] = tmp_arr
            os.remove("tmp_x.pkl")
            np.save(f, tmp_x, allow_pickle=False, fix_imports=True)
            tmp_x._mmap.close()
            os.remove("./tmp_x.arr")
        pbar.update(1)

        test_or_train = str(test_or_train).lower()
        with open(f"direction_x_level_{test_or_train}.npy", 'wb') as f:
            tmp_level = np.memmap("./tmp_level.arr", mode="w+", dtype=np.float32, shape=(np.sum(whistle_length), 1024, 4))
            with open(f"tmp_level.pkl", 'rb') as tmp_f:
                for idx in range(np.sum(whistle_length)):
                    tmp_arr = pickle.load(tmp_f)
                    tmp_arr = np.swapaxes(np.squeeze(tmp_arr, axis=-1), axis1=1, axis2=0)
                    tmp_level[idx] = tmp_arr
            os.remove("tmp_level.pkl")
            np.save(f, tmp_level, allow_pickle=False, fix_imports=True)
            tmp_level._mmap.close()
            os.remove("./tmp_level.arr")
        pbar.update(1)

        with open(f"direction_x_{test_or_train}_phi.npy", 'wb') as f:
            tmp_phi = np.memmap("./tmp_phi.arr", mode="w+", dtype=np.float32, shape=(np.sum(whistle_length), 513, 4))
            with open(f"tmp_phi.pkl", 'rb') as tmp_f:
                for idx in range(np.sum(whistle_length)):
                    tmp_arr = pickle.load(tmp_f)
                    tmp_arr = np.swapaxes(np.squeeze(tmp_arr, axis=-1), axis1=1, axis2=0)
                    tmp_phi[idx] = tmp_arr
            os.remove("tmp_phi.pkl")
            np.save(f, tmp_phi, allow_pickle=False, fix_imports=True)
            tmp_phi._mmap.close()
            os.remove("./tmp_phi.arr")
        pbar.update(1)

        with open(f"direction_y_{test_or_train}.npy", 'wb') as f:
            tmp_y = np.memmap("./tmp_y.arr", mode="w+", dtype=np.float32, shape=(np.sum(whistle_length), 2))
            with open(f"tmp_y.pkl", 'rb') as tmp_f:
                for idx in range(np.sum(whistle_length)):
                    tmp_arr = pickle.load(tmp_f)
                    tmp_y[idx] = tmp_arr
            os.remove("tmp_y.pkl")
            np.save(f, tmp_y, allow_pickle=False, fix_imports=True)
            tmp_y._mmap.close()
            os.remove("./tmp_y.arr")
        pbar.update(1)

        with open(f"direction_room_{test_or_train}.npy", 'wb') as f:
            with open(f"tmp_room.pkl", 'rb') as tmp_f:
                room_train = np.array([pickle.load(tmp_f) for _ in range(np.sum(whistle_length))])
            os.remove("tmp_room.pkl")
            np.save(f, room_train, allow_pickle=False, fix_imports=True)
            del room_train
        pbar.update(1)

        with open(f"whistle_length_{test_or_train}.npy", 'wb') as f:
            np.save(f, whistle_length, allow_pickle=False, fix_imports=True)
            del whistle_length
        pbar.update(1)

        with open(f"whistle_gap_length_{test_or_train}.npy", 'wb') as f:
            np.save(f,whistle_gap_length, allow_pickle=False, fix_imports=True)
            del whistle_gap_length
        pbar.update(1)

    return (angle_statistic, distance_statistic, used_files)

def prettyPrintStatistic(statistic):
    angle_statistic, distance_statistic, used_files = statistic
    print("")
    print("Data-Statistics:")
    print("")
    print("Angle  |  Deposit")
    print("-----------------")

    values = []
    for k, v in angle_statistic.items():
        k = str(k)
        if len(k) < 6:
            while len(k) < 6:
                k = " " + k
        print(f"{k} | {v}")
        values.append(v)
    print("")

    values = np.asarray(values)
    error = np.abs(values - np.mean(values))
    if np.max(error) > 2 * np.std(values):
        print("WARNING: Angle-Dataset is imbalenced!")
    elif np.max(error) > 1.5 * np.std(values):
        print("WARNING: Angle-Dataset could be imbalenced!")

    print("")
    print("Distance  |  Deposit")
    print("--------------------")

    values = []
    for k, v in distance_statistic.items():
        k = str(k)
        if len(k) < 6:
            while len(k) < 6:
                k = " " + k
        print(f"   {k} | {v}")
        values.append(v)
    print("")

    values = np.asarray(values)
    error = np.abs(values - np.mean(values))
    if np.max(error) > 2 * np.std(values):
        print("WARNING: Distance-Dataset is imbalenced!")
    elif np.max(error) > 1.5 * np.std(values):
        print("WARNING: Distance-Dataset could be imbalenced!")

    print(f"The dataset consists of {np.sum(values)} samples from {used_files} sessions.")

def update_plot(fig, axs, model = None, dataset = None, test_or_train = TEST_OR_TRAIN, model_name = MODEL_NAME, window_size = WINDOW_SIZE, threshold = THRESHOLD, direction_labels=DIRECTION_LABELS, attention_multiplier = ATTENTION_MULTIPLIER, fullview = False, load_data = True):
    global data
    global samplerate
    
    if dataset is None or model is None:
        return
    
    path = f"./WhistleDirectionDistance/{test_or_train}/{dataset}.wav"
    if not Path(path).exists():
        print(f"ERROR: No such file: {Path(path).stem}.wav")
        return

    direction_label = direction_labels.get(Path(path).stem)
    if direction_label is None:
        print(f"WARNING: No labelset of file {Path(path).stem}.wav exists!")

    if load_data:
        samplerate, data = wavfile.read(path)
    channels = data.shape[1]
    hamming = np.hamming(window_size)

    windowed_data = np.lib.stride_tricks.sliding_window_view(data, window_size, axis=0)[0::window_size//2, :] * hamming
    fft_windowed_data_log10 = np.reshape(20 * np.log10(np.abs(np.fft.fft(windowed_data)[:, :, 0:window_size//2 + 1])),
                                (windowed_data.shape[0], channels, window_size//2 + 1, 1))

    fft_windowed_data = np.reshape(np.fft.fft(windowed_data)[:, :, 0:window_size//2 + 1],
                                (windowed_data.shape[0], channels, window_size//2 + 1, 1))

    # Shape => Channels, Number of Windows, FFT Data, 1
    fft_windowed_data_log10 = np.reshape(np.asarray(np.split(fft_windowed_data_log10, channels, axis=1)),
                                (channels, windowed_data.shape[0], window_size//2 + 1, 1))

    fft_windowed_data = np.reshape(np.asarray(np.split(fft_windowed_data, channels, axis=1)),
                                (channels, windowed_data.shape[0], window_size//2 + 1, 1))

    label = []
    for fft_data_windows in fft_windowed_data_log10:
        channel_label = []
        for fft_data in np.array_split(fft_data_windows, np.ceil(fft_data_windows.shape[0]/2048)):
            channel_label.extend(model.predict(fft_data))
        label.append(channel_label)
    label = np.asarray(label)

    label[label > threshold] = window_size//4
    label[label <= threshold] = 0.0

    longest_sequence = 0
    for channel in range(channels):
        last_label = label[channel][0]
        sequence = 0
        for whistle_label in label[channel]:
            if last_label > 0 and whistle_label == last_label:
                sequence += 1
            else:
                if sequence > longest_sequence:
                    longest_sequence = sequence
                sequence = 0
            last_label = whistle_label
    attention_length = longest_sequence * attention_multiplier

    whistle_idx_range = []
    detected_whistles = []
    for channel in range(channels):
        perv_whistle_label = 0.0
        min_idx = 0
        max_idx = 0
        tmp_whistle_idx_range = []
        attention = 0
        active_attention = False
        for idx, whistle_label in enumerate(label[channel]):
            if not active_attention and perv_whistle_label == 0.0 and whistle_label == window_size//4:
                min_idx = idx
                active_attention = True
            elif perv_whistle_label == window_size//4 and whistle_label == 0.0:
                max_idx = idx - 1

            if active_attention and attention > attention_length:
                tmp_whistle_idx_range.append([min_idx, max_idx])
                attention = 0
                active_attention = False

            if active_attention:
                attention += 1

            perv_whistle_label = whistle_label
        if not tmp_whistle_idx_range:
            print(f"WARNING: No whistle detected: mic at {MICS[channel]} possibly broken or no whistle was recorded!")
        else:
            detected_whistles.append(len(tmp_whistle_idx_range))
            whistle_idx_range.append(tmp_whistle_idx_range)
    whistle_idx_range = np.asarray(whistle_idx_range, dtype=object)
    max_num_of_detected_whistles = np.max(detected_whistles)
    min_num_of_detected_whistles = np.min(detected_whistles)

    whistle_cluster = np.zeros(fft_windowed_data_log10[0].T.shape[2])
    x_min_limit = 0
    x_max_limit = 0
    if len(np.unique(detected_whistles)) == 1:
        whistle_idx_range = np.hstack((np.expand_dims(np.min(np.min(whistle_idx_range, axis=0), axis=1), axis=-1), np.expand_dims(np.max(np.max(whistle_idx_range, axis=0), axis=1), axis=-1)))
        whistle_idx_range = whistle_idx_range.astype(np.int64)

        whistle_idx_gap = []
        last_upper_bound = None
        x_min_limit = np.min(whistle_idx_range)
        x_max_limit = np.max(whistle_idx_range)
        whistle_cluster = np.zeros(fft_windowed_data_log10[0].T.shape[2])
        for lower_bound, upper_bound in whistle_idx_range:
            if last_upper_bound is None:
                last_upper_bound = upper_bound
            else:
                whistle_idx_gap.append(lower_bound - last_upper_bound)
                last_upper_bound = upper_bound
            for idx in range(lower_bound, upper_bound+1):
                whistle_cluster[idx] = window_size//3

    fig.clf()
    fig.add_axes(axs[0])
    fig.add_axes(axs[1])
    fig.add_axes(axs[2])
    fig.add_axes(axs[3])
    fig.canvas.manager.set_window_title("Whistle-Debug: " + dataset + f" ({len(data)//samplerate} sec.)")
    axs[0].cla()
    axs[0].set_ylabel("Rear Left")
    axs[0].plot(whistle_cluster, color="white", label="fused-whistledata")
    axs[0].plot(label[0], color="green", label="whistle-detection")
    axs[0].imshow(np.reshape(fft_windowed_data_log10[0].T, (fft_windowed_data_log10[0].T.shape[1], fft_windowed_data_log10[0].T.shape[2], fft_windowed_data_log10[0].T.shape[0])), cmap="gnuplot2", interpolation="nearest", vmin=-60, vmax=0)
    axs[1].cla()
    axs[1].set_ylabel("Rear Right")
    axs[1].plot(whistle_cluster, color="white")
    axs[1].plot(label[1], color="green")
    axs[1].imshow(np.reshape(fft_windowed_data_log10[1].T, (fft_windowed_data_log10[1].T.shape[1], fft_windowed_data_log10[1].T.shape[2], fft_windowed_data_log10[1].T.shape[0])), cmap="gnuplot2", interpolation="nearest", vmin=-60, vmax=0)
    axs[2].cla()
    axs[2].set_ylabel("Front Left")
    axs[2].plot(whistle_cluster, color="white")
    axs[2].plot(label[2], color="green")
    axs[2].imshow(np.reshape(fft_windowed_data_log10[2].T, (fft_windowed_data_log10[2].T.shape[1], fft_windowed_data_log10[2].T.shape[2], fft_windowed_data_log10[2].T.shape[0])), cmap="gnuplot2", interpolation="nearest", vmin=-60, vmax=0)
    axs[3].cla()
    axs[3].set_ylabel("Front Right")
    axs[3].plot(whistle_cluster, color="white")
    axs[3].plot(label[3], color="green")
    axs[3].imshow(np.reshape(fft_windowed_data_log10[3].T, (fft_windowed_data_log10[3].T.shape[1], fft_windowed_data_log10[3].T.shape[2], fft_windowed_data_log10[3].T.shape[0])), cmap="gnuplot2", interpolation="nearest", vmin=-60, vmax=0)
    fig.legend(facecolor="grey", title=f"Threshold: {threshold}")
    fig.suptitle(f"Labeled whistles: {len(direction_label)} | Detected whistles: {min_num_of_detected_whistles} / {max_num_of_detected_whistles}", fontsize=12, fontweight='normal')

    plt.subplots_adjust(top=0.95, bottom=0.05, left=0.05, right=0.95, hspace=0, wspace=0)
    if not fullview:
        plt.xlim(x_min_limit - 50, x_min_limit + 3950)
    else:
        plt.xlim(x_min_limit - 50, x_max_limit + 50)
    plt.gca().invert_yaxis()
    plt.show()

def debug_dataset(dataset = None, test_or_train = TEST_OR_TRAIN, model_name = MODEL_NAME, window_size = WINDOW_SIZE, threshold = THRESHOLD, direction_labels=DIRECTION_LABELS, attention_multiplier = ATTENTION_MULTIPLIER):
    fig, axs = plt.subplots(4, 1, sharex=True, sharey=True)
    model = tf.keras.models.load_model(model_name, compile=False)

    def on_click(event):
        global data
        global samplerate
        global global_window_size
        global global_load_data

        if event.dblclick:
            frame = event.xdata
            x, y = fig.transFigure.inverted().transform((event.x, event.y))
            rear_left_bb = axs[0].get_position()
            rear_right_bb = axs[1].get_position()
            front_left_bb = axs[2].get_position()
            front_right_bb = axs[3].get_position()
            if rear_left_bb.contains(x, y):
                sd.play(data[np.int64(np.floor(frame*(global_window_size//2))):np.int64(np.floor(frame*(global_window_size//2))) + 2*samplerate,0], samplerate)
            elif rear_right_bb.contains(x, y):
                sd.play(data[np.int64(np.floor(frame*(global_window_size//2))):np.int64(np.floor(frame*(global_window_size//2))) + 2*samplerate,1], samplerate)
            elif front_left_bb.contains(x, y):
                sd.play(data[np.int64(np.floor(frame*(global_window_size//2))):np.int64(np.floor(frame*(global_window_size//2))) + 2*samplerate,2], samplerate)
            elif front_right_bb.contains(x, y):
                sd.play(data[np.int64(np.floor(frame*(global_window_size//2))):np.int64(np.floor(frame*(global_window_size//2))) + 2*samplerate,3], samplerate)
        if event.button is MouseButton.RIGHT:
            frame = event.xdata
            x, y = fig.transFigure.inverted().transform((event.x, event.y))
            rear_left_bb = axs[0].get_position()
            rear_right_bb = axs[1].get_position()
            front_left_bb = axs[2].get_position()
            front_right_bb = axs[3].get_position()
            if rear_left_bb.contains(x, y) or rear_right_bb.contains(x, y) or front_left_bb.contains(x, y) or front_right_bb.contains(x, y):
                mask = np.ones(data.shape[0])
                mask[list(range(np.int64(np.floor(frame*(global_window_size//2))), np.int64(np.floor(frame*(global_window_size//2))) + 2*samplerate))] = 0
                data = np.copy(data[mask.astype(np.bool_)])
                global_load_data = False
                update_plot(fig, axs, model, dataset, test_or_train, model_name, window_size, global_threshold, direction_labels, attention_multiplier, global_fullview, global_load_data)

    def on_press(event):
        global global_threshold
        global global_fullview
        global global_load_data
        global samplerate
        global data

        if event.key == "c":
            wavfile.write(f"{dataset}_edit.wav", samplerate, data)
        if event.key == "a":
            if global_fullview:
                global_fullview = False
            else:
                global_fullview = True
            update_plot(fig, axs, model, dataset, test_or_train, model_name, window_size, global_threshold, direction_labels, attention_multiplier, global_fullview, global_load_data)
        if event.key == "r":
            global_load_data = True
            update_plot(fig, axs, model, dataset, test_or_train, model_name, window_size, global_threshold, direction_labels, attention_multiplier, global_fullview, global_load_data)
        if event.key == "t":
            global_threshold += 0.05
            update_plot(fig, axs, model, dataset, test_or_train, model_name, window_size, global_threshold, direction_labels, attention_multiplier, global_fullview, global_load_data)
            print(f"Update threshold to: {global_threshold}")

    cid = fig.canvas.mpl_connect("button_press_event", on_click)
    pid = fig.canvas.mpl_connect("key_press_event", on_press)

    update_plot(fig, axs, model, dataset, test_or_train, model_name, window_size, threshold, direction_labels, attention_multiplier)

    fig.canvas.mpl_disconnect(cid)
    fig.canvas.mpl_disconnect(pid)

# ffmpeg -i ./VenomMicTestLab.wav -ss 1 -acodec copy ./VenomMicTestLab2.wav -> -ss length of skip to cut front
# ffmpeg -i ./VenomMicTestLab.wav -t 40 -acodec copy ./VenomMicTestLab2.wav -> -t length of audio to cut end
statistic = generate_dataset("Demo")
prettyPrintStatistic(statistic)

#check_for_broken_mics("Test")

data = None
samplerate = None
global_window_size = WINDOW_SIZE
global_threshold = THRESHOLD
global_fullview = False
global_load_data = True
#debug_dataset("Hulk_Lab_Test_02", "Eval")
